const fs = require('fs');
const firstline = require('firstline');

const {promisify} = require('util');
const readFileAsync = promisify(fs.readFile);
const writeFileAsync = promisify(fs.writeFile);
const appendFileAsync = promisify(fs.appendFile);
const unlinkFileAsync = promisify(fs.unlink);

const secureString = '// This file is generated by xdepend';
const description = '//\n// Thanks for using my tool, if you find a bug or \n// you have a feature request, post it on the github page';

/**
 * Checks if file exists and then if it is secure
 * A file is secure if the first line of the file contains secureString
 * otherwise we assume you have a typo in your path
 *
 * @param filePath
 * @returns {Promise<Boolean>} - resolves false if file does not exists, resolves true if file is secure, rejects if file is not secure
 */
async function checkFileSecure(filePath) {
	// Check if path exists
	// use fs.open when reading afterwards - @see https://nodejs.org/api/fs.html#fs_fs_access_path_mode_callback
	// r+ opens file in read only mode, if it does not exist, then fs.open throws an error

	try {
		await readFileAsync(filePath);
	} catch (error) {
		if (error.code === 'ENOENT') {
			return false;
		}
	}

	// SecureString / secureContent is used to make sure we alter the right file
	// we do not want to loose you data because of a typo in the path :)
	const fl = await firstline(filePath);
	if (fl !== secureString) {
		return true; // File exists and is secure
	}

	throw new Error('Check the filepath we probably overwrite an existing file !!!');
}

/**
 * @param filePath
 * @returns {Promise<Boolean>} - resolves true if file is removed, resolves false if file does not exist
 */
async function removeOldFile(filePath) {
	// We check first if the file exists, then if the first line is secure
	// if both conditions are met, then we remove the file :)
	const fileExists = await checkFileSecure(filePath);
	if (!fileExists) {
		return true;
	}

	return unlinkFileAsync(filePath);
}

/**
 * @param filePath
 * @param content
 * @returns {Promise<Boolean>} - resolves true if file is written successfully
 */
async function writeFile(filePath, content) {
	// SecureString / secureContent is used to make sure we alter the right file
	// we do not want to loose you data because of a typo in the path :)
	await checkFileSecure(filePath);

	const secureContent = `${secureString}\n${description}\n\n${content}`;
	return writeFileAsync(filePath, secureContent);
}

/**
 * @param filePath
 * @param content
 * @returns {Promise<unknown>} - resolves true if content is appended successfully
 */
async function appendFile(filePath, content) {
	// SecureString / secureContent is used to make sure we alter the right file
	// we do not want to loose you data because of a typo in the path :)
	const fileExists = await checkFileSecure(filePath);
	if (!fileExists) {
		return true;
	}

	const contentNewLine = `\n${content}`;
	return appendFileAsync(filePath, contentNewLine);
}

function readFile(filePath) {
	// Well, plain simple readfile function huh!?
	return readFileAsync(filePath);
}

module.exports = {writeFile, readFile, removeOldFile, appendFile, checkFileSecure};
