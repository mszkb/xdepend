const fs = require('fs');
const firstline = require('firstline');
const secureString = "// This file is generated by xdepend"
const description = "//\n// Thanks for using my tool, if you find a bug or \n// you have a feature request, post it on the github page"

function checkFileSecure(filePath) {
	return new Promise((resolve, reject) => {
		fs.open(filePath, 'r', async (err) => {
			if(err && err.code === 'ENOENT') {
				resolve(false);
			} else {
				const fl = await firstline(filePath);
				if (fl !== secureString) {
					reject(new Error("Check the filepath we probably overwrite an existing file !!!"));
				} else {
					resolve(true);
				}
			}
		})
	})
}

function removeOldFile(filePath) {
	// secureString / secureContent is used to make sure we alter the right file
	// we do not want to loose you data because of a typo in the path :)
	//
	// we check first if the file exists, then if the first line is secure
	// if both conditions are met, then we remove the file :)
	return new Promise( (resolve, reject) => {
		checkFileSecure(filePath).then((exists) => {
			if(exists) {
				fs.unlink(filePath, (err) => {
					if (err) reject(err);
					resolve("File removed");
				});
			} else {
				resolve(false);
			}
		})
	});
}

function writeFile(filePath, content) {
	// secureString / secureContent is used to make sure we alter the right file
	// we do not want to loose you data because of a typo in the path :)
	return new Promise((resolve, reject) => {
		checkFileSecure(filePath).then(() => {
			const secureContent = `${secureString}\n${description}\n\n${content}`;
			fs.writeFile(filePath, secureContent, (err) => {
				if(err) reject(err);
				resolve("File written");
			})
		});
	})
}

function appendFile(filePath, content) {
	// secureString / secureContent is used to make sure we alter the right file
	// we do not want to loose you data because of a typo in the path :)
	return new Promise(async (resolve, reject) => {
		// const fl = await firstline(filePath);
		// if (fl !== secureString) {
		// 	reject(new Error("Check the filepath we probably overwrite an existing file !!!"));
		// }
		checkFileSecure(filePath).then(() => {
			const contentNewLine = `\n${content}`;
			fs.appendFile(filePath, contentNewLine, (err) => {
				if (err) reject(err);
				resolve("File appended");
			})
		})
	})
}

function readFile(filePath) {
	// Well, plain simple readfile function huh!?
	return new Promise((resolve, reject) => {
		fs.readFile(filePath, "utf8", (err, data) => {
			if (err) {
				reject(err);
			}

			resolve(data);
		});
	});
}

module.exports = { writeFile, readFile, removeOldFile, appendFile };
